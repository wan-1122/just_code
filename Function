
	
	
	
	/**
	 * <pre>
	 * {@code xxx.<Test, Integer>orElse(null
	    		, x -> {
	    			return x.test2;
	    		}, 11)
	     }
	 * </pre>
	 * @param test
	 * @param code
	 * @param defaultValue
	 * @return
	 */
	public static <E, V> V orElse(E test, Function<E, V> code, V defaultValue) {
		if (test == null) {
			return defaultValue;
		}
		return code.apply(test);
	}
	
	/**
	 * 
	 * <pre>
	 * {@code xxx.<Test, Integer>orElseGet(null
	    		, x -> {
	    			return x.test2;
	    		}, () -> {
	    			return 1;
	    		})
	     }
	 * </pre>
	 * @param test
	 * @param code
	 * @param supplier
	 * @return
	 */
	public static <E, V> V orElseGet(E test, Function<E, V> code, Supplier<V> supplier) {
		if (test == null) {
			return supplier.get();
		}
		return code.apply(test);
	}
	
	
	    //example:S
	    System.out.println(ConvertUtils.<Test, Integer>orElse(null
	    		, x -> {
	    			return x.test2;
	    		}, 11)
	    );
	    
	    System.out.println(ConvertUtils.<Test, Integer>orElseGet(null
	    		, x -> {
	    			return x.test2;
	    		}, () -> {
	    			return 1;
	    		})
	    );
	    
	    List<TestClass> list = Arrays.asList(new TestClass[] { new TestClass("test1", "test2") });
	    
	    TestClassNew class1 = ConvertUtils.<TestClass, TestClassNew>orElse(null, x -> {
	    	return new TestClassNew(x.getTest1(), x.getTest2());
	    }, null);
	    
	    System.out.println(class1);
	    
	    TestClassNew class2 = ConvertUtils.<TestClass, TestClassNew>orElseGet(list.get(0), x -> {
	    	return new TestClassNew(x.getTest1(), x.getTest2());
	    }, () -> {
	    	return new TestClassNew("tmp1", "tmp2");
	    });
	    System.out.println(class2);
	    
	    
	    
	    /////
	    Map<String, List<TestClassNew>> map2 = ConvertUtils.<String, TestClass, TestClassNew>listToMapList(list, x -> {
	    	return x.getTest1();
	    }, x -> {
	    	return new TestClassNew(x.getTest1(), x.getTest2());
	    });
	    System.out.println(map2);
	    
	    ConvertUtils.<Map<String, List<TestClassNew>>, List<TestClassNew>>orElse(map2, x -> {
	    	return x.get("test1");
	    }, Collections.emptyList());
	    
	    /**
	     * 
	     */
	    List<TestClassNew> mapList2 = ConvertUtils.orElse(map2, x -> {
	    	return x.get("test1");
	    }, Collections.emptyList());
	    
	    System.out.println(mapList2);
	    //example:E
	
	
  
Function //

else와 elseGet의 차이는 supplier/

optional 보고 비슷하게 만들면 될듯

