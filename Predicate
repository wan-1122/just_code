
1. 
public static <V> V matchOrElse(boolean isMatch, V matchValue, V elseValue) {
  if (isMatch) {
    return matchValue;
  }
  return elseValue;
}

how to use?

List<String> allows = Arrays.asList("1", "Y", null)
    .stream().map(x -> { return x == null ? null :  x.toLowerCase(); }).collect(Collectors.toList());

Predicate<String> p = (x) -> allows.contains(x == null ? x : x.toLowerCase());

System.out.println(matchOrElse(p.test("Y"), "Y", "N")); -> Y
System.out.println(matchOrElse(p.test("y"), "Y", "N")); -> Y
System.out.println(matchOrElse(p.test("1"), "Y", "N")); -> Y
System.out.println(matchOrElse(p.test("n"), "Y", "N")); -> N
System.out.println(matchOrElse(p.test(null), "Y", "N")); -> Y

2. 

public static <V> V matchOrElse(V source, Predicate<V> predicate, V matchValue, V elseValue) {
	if (source == null) {
		return elseValue;
	}
	if (predicate.test(source)) {
		return matchValue;
	}
	return elseValue;
}

how to use?

List<String> allows = Arrays.asList("1", "Y", null).stream().map(x -> { return x == null ? null :  x.toLowerCase(); }).collect(Collectors.toList());
Predicate<String> p = (x) -> allows.contains(x == null ? x : x.toLowerCase());

System.out.println(matchOrElse("Y", p, "Y", "N")); -> Y
System.out.println(matchOrElse("y", p, "Y", "N")); -> Y
System.out.println(matchOrElse("1", p, "Y", "N")); -> Y
System.out.println(matchOrElse("n", p, "Y", "N")); -> N
System.out.println(matchOrElse(null, p, "Y", "N")); -> Y


2의 단점은 같은 input type과 output type이 같아야 한다.

3. 

List<String> allows = Arrays.asList("1", "Y", null).stream().map(x -> { return x == null ? null :  x.toLowerCase(); }).collect(Collectors.toList());
Predicate<String> p = (x) -> allows.contains(x == null ? x : x.toLowerCase());

System.out.println(p.test("Y") ? "Y" : "N"); -> Y
System.out.println(p.test("y") ? "Y" : "N")); -> Y
System.out.println(p.test("1") ? "Y" : "N")); -> Y
System.out.println(p.test("n") ? "Y" : "N")); -> N
System.out.println(p.test(null) ? "Y" : "N")); -> Y


1. vo.setValue1(Utils.matchOrElse(p.test(vo.getValue1()), "Y", "N"));

2. vo.setValue1(Utils.matchOrElse(vo.getValue1(), p, "Y", "N"));

3. vo.setValue1(p.test(vo.getValue1()) ? "Y" : "N"));

4. vo.setValue1(Utils.matchOrElse(vo.getValue1(), (x) -> allows.contains(x == null ? x : x.toLowerCase()), "Y", "N"));
